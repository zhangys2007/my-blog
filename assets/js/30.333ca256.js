(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{756:function(e,n,a){"use strict";a.r(n);var t=a(5),r=Object(t.a)({},(function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[e._v("#")]),e._v(" 概述")]),e._v(" "),a("p",[e._v("在 Objective-C 和 Swift 这两种编程语言中，字符串处理是非常常见的任务。而在字符串处理中，常常需要涉及到字符串的截取、搜索等操作，这就需要用到 NSRange 和 Range 两个类")]),e._v(" "),a("p",[e._v("NSRange 是Objective-C中用来表示字符串范围的结构体，被定义在 Foundation 框架中。而在 Swift 中，Range 取代了 NSRange，且 Range 是一个泛型结构体，允许在不同类型的集合中表示范围。下面我们来详细介绍 NSRange 和 Range 的概念、使用方式以及它们之间的转换方式")]),e._v(" "),a("h2",{attrs:{id:"nsrange"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nsrange"}},[e._v("#")]),e._v(" NSRange")]),e._v(" "),a("p",[e._v("NSRange是Foundation框架中的一个结构体， 因此在 Objective-C 中使用时需要导入 Foundation 框架。它主要用来表示字符串的范围，由一个 location 属性表示起始位置，一个 length 属性表示长度。在 Objective-C 中，通常可以用 NSRange 来指定需要截取的字符串的范围")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v('NSString *str = @"hello world";\nNSRange range = NSMakeRange(2, 5); // location = 2, length = 5\nNSString *subStr = [str substringWithRange:range];\nNSLog(@"%@", subStr); // 输出 "llo w"\n')])])]),a("h2",{attrs:{id:"range"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#range"}},[e._v("#")]),e._v(" Range")]),e._v(" "),a("p",[e._v("Range 是一个泛型结构体，用于表示集合中的范围，包括数组、字符串和字典等。在 Swift 中，我们可以通过 Range 来指定需要截取的字符串的范围")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v('let str = "hello, world"\nlet range = str.index(str.startIndex, offsetBy: 2)..<str.index(str.startIndex, offsetBy: 7)\nlet result = str[range]\nprint(result) // 输出 "llo, "\n')])])]),a("p",[e._v("在 Swift 中，使用 Range 时需要指定范围的起始位置和结束位置，可以使用集合的 startIndex 和 endIndex 属性来指定。此外，Range 还可以是半开区间形式的，即指定范围的左边是闭合的，右边是开放的")]),e._v(" "),a("h2",{attrs:{id:"nsrange-和-range-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nsrange-和-range-的区别"}},[e._v("#")]),e._v(" NSRange 和 Range 的区别")]),e._v(" "),a("p",[e._v("NSRange 和 Range 都是用来表示字符串或集合中的范围的类型，但是它们之间有以下几个区别：")]),e._v(" "),a("ul",[a("li",[e._v("NSRange 是一个结构体，而 Range 是一个泛型结构体")]),e._v(" "),a("li",[e._v("NSRange 的 location 和 length 属性都是整数类型的，而 Range 的起始位置和结束位置可以是任何类型")]),e._v(" "),a("li",[e._v("NSRange 是包含结束位置的（即 length 表示字符个数），而 Range 是不包含结束位置的（即 endIndex 表示最后一个字符的下一个位置）")]),e._v(" "),a("li",[e._v("Swift 中的 Range 支持半开区间和双闭区间形式，而 NSRange 只支持双闭区间")])]),e._v(" "),a("h2",{attrs:{id:"nsrange-和-range-转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nsrange-和-range-转换"}},[e._v("#")]),e._v(" NSRange 和 Range 转换")]),e._v(" "),a("p",[e._v("由于 NSRange 是 Objective-C 中的类型，而 Range 是 Swift 中的类型，因此在进行数据交换时需要进行类型转换。在 Objective-C 中，可以使用NSString的rangeOfString: 和 substringWithRange: 方法来获取字符串的 NSRange，而在 Swift 中可以使用 range(of:) 方法获取 Range，然后通过 NSRange(location:length:) 初始化器进行转换")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v(' Swift --\x3e Objective-C\nlet str = "hello, world"\nif let range = str.range(of: "llo") {\n    let nsRange = NSRange(range, in: str)\n}\n\n// Objective-C --\x3e Swift\nNSString *str = @"hello world";\nNSRange range = [str rangeOfString:@"o w"];\nlet swiftRange = Range(range, in: str)\n')])])]),a("p",[e._v("需要注意的是，在转换时需要考虑到字符串的编码方式，因为 C 语言中使用的是 UTF-8 编码，而在 Objective-C 中使用的是 UTF-16 编码")]),e._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),a("p",[e._v("综上所述，NSRange 和 Range 都是非常有用的类型，用来表示字符串中的范围，但它们之间存在一些区别。在进行类型转换时需要注意对字符串的编码方式进行转换，以确保转换的准确性。")]),e._v(" "),a("h1",{attrs:{id:"end"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#end"}},[e._v("#")]),e._v(" END")])])}),[],!1,null,null,null);n.default=r.exports}}]);