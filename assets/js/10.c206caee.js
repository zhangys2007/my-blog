(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{714:function(n,e,i){n.exports=i.p+"assets/img/20200701.aadb0d2e.png"},715:function(n,e,i){n.exports=i.p+"assets/img/2020070101.784d2cb4.jpg"},716:function(n,e,i){n.exports=i.p+"assets/img/2020070102.1f564dd8.jpg"},746:function(n,e,i){"use strict";i.r(e);var t=i(5),a=Object(t.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("p",[t("RouterLink",{attrs:{to:"/handbook/iOS/2020/设计模式/20200601/20200601.html"}},[n._v("策略模式")])],1),n._v(" "),t("h2",{attrs:{id:"前言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[n._v("#")]),n._v(" 前言")]),n._v(" "),t("p",[n._v("本周分享的内容是三种设计模式 (命令模式、中介者模式以及组合模式) 及其它们在AppDelegate解耦场景下的应用，特别是组合模式，沉淀出相应的轮子分享给大家。\n同时也给大家说下后面关于设计模式系列的文章计划，因为设计模式相关文章会结合我们开发中实际上会遇到的场景进行整理，所以发文可能不连续，希望大家理解，我会将大部分设计模式的代码示例全部整理到DesignPatternsDemo仓库中，形式为Playground，所以代码示例中可能会有一些手动调用系统函数的情况出现。")]),n._v(" "),t("h2",{attrs:{id:"场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#场景"}},[n._v("#")]),n._v(" 场景")]),n._v(" "),t("p",[n._v("AppDelegate 是应用程序的根对象，即唯一代理，可以认为是每个 iOS 项目的核心。")]),n._v(" "),t("ul",[t("li",[n._v("其提供应用程序生命周期事件的暴露；")]),n._v(" "),t("li",[n._v("其确保应用程序与系统以及其他应用程序正确的交互；")]),n._v(" "),t("li",[n._v("其通常承担很多职责，这使得很难进行更改，扩展和测试。")])]),n._v(" "),t("p",[n._v("随着业务的迭代升级，不断增加新的功能和业务，AppDelegate中的代码量也不断增长，致使其 Massive。AppDelegate中常见的业务会包括：")]),n._v(" "),t("ul",[t("li",[n._v("生命周期中的事件处理及传播；")]),n._v(" "),t("li",[n._v("管理 UI 堆栈配置：选择初始视图控制器，执行根视图控制器转换；")]),n._v(" "),t("li",[n._v("管理后台任务；")]),n._v(" "),t("li",[n._v("管理通知；")]),n._v(" "),t("li",[n._v("三方库初始化；")]),n._v(" "),t("li",[n._v("管理设备方向；")]),n._v(" "),t("li",[n._v("设置 UIAppearance；")]),n._v(" "),t("li",[n._v("...")])]),n._v(" "),t("p",[n._v("并且因为AppDelegate会影响整个 APP，所以在面对复杂的AppDelegate时，我们就会小心翼翼，生怕自己自己的改动影响到其他的功能。所以说 AppDelegate 的简洁和清晰对于健康的 iOS 架构来说是至关重要的。\n下面我们利用上述三种设计模式实现对AppDelegate的解耦，使其优雅。")]),n._v(" "),t("hr"),n._v(" "),t("h2",{attrs:{id:"命令模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#命令模式"}},[n._v("#")]),n._v(" 命令模式")]),n._v(" "),t("p",[n._v("命令模式（Command） 是一种 行为设计模式，它可将请求转换为一个包含与请求相关的所有信息的独立对象。该转换让你能根据不同的请求将方法参数化、延迟请求执行或将其放入队列中，且能实现可撤销操作。")]),n._v(" "),t("h3",{attrs:{id:"uml"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#uml"}},[n._v("#")]),n._v(" UML")]),n._v(" "),t("img",{attrs:{src:i(714),width:"80%"}}),n._v(" "),t("h3",{attrs:{id:"实现方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现方式"}},[n._v("#")]),n._v(" 实现方式")]),n._v(" "),t("ul",[t("li",[t("p",[n._v("声明仅有一个执行方法的命令接口。")])]),n._v(" "),t("li",[t("p",[n._v("抽取请求并使之成为实现命令接口的具体命令类。每个类都必须有一组成员变量来保存请求参数和对于实际接收者对象的引用。所有这些变量的数值都必须通过命令构造函数进行初始化。")])]),n._v(" "),t("li",[t("p",[n._v("找到担任发送者职责的类。 在这些类中添加保存命令的成员变量。发送者只能通过命令接口与其命令进行交互。发送者自身通常并不创建命令对象，而是通过客户端代码获取。")])]),n._v(" "),t("li",[t("p",[n._v("修改发送者使其执行命令，而非直接将请求发送给接收者。")])]),n._v(" "),t("li",[t("p",[n._v("客户端必须按照以下顺序来初始化对象：")])]),n._v(" "),t("li",[t("ul",[t("li",[n._v("创建接收者。")])])]),n._v(" "),t("li",[t("ul",[t("li",[n._v("创建命令，如有需要可将其关联至接收者。")])])]),n._v(" "),t("li",[t("ul",[t("li",[n._v("创建发送者并将其与特定命令关联。")])])])]),n._v(" "),t("h3",{attrs:{id:"代码示例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#代码示例"}},[n._v("#")]),n._v(" 代码示例")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v('import UIKit\n\n// MARK: - 命令接口\nprotocol AppDelegateDidFinishLaunchingCommand {\n    func execute()\n}\n\n// MARK: - 初始化三方命令\nstruct InitializeThirdPartiesCommand: AppDelegateDidFinishLaunchingCommand {\n    func execute() {\n        print("InitializeThirdPartiesCommand 触发")\n    }\n}\n\n// MARK: - 初始化rootViewController\nstruct InitialViewControllerCommand: AppDelegateDidFinishLaunchingCommand {\n    let keyWindow: UIWindow\n\n    func execute() {\n        print("InitialViewControllerCommand 触发")\n        keyWindow.rootViewController = UIViewController()\n    }\n}\n\n// MARK: - 命令构造器\nfinal class AppDelegateCommandsBuilder {\n    private var window: UIWindow!\n\n    func setKeyWindow(_ window: UIWindow) -> AppDelegateCommandsBuilder {\n        self.window = window\n        return self\n    }\n\n    func build() -> [AppDelegateDidFinishLaunchingCommand] {\n        return [\n            InitializeThirdPartiesCommand(),\n            InitialViewControllerCommand(keyWindow: window),\n        ]\n    }\n}\n\n// MARK: - AppDelegate\n/// 充当发送者、客户端的作用\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n    var window: UIWindow?\n\n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n\n        window = UIWindow()\n\n        AppDelegateCommandsBuilder()\n            .setKeyWindow(window!)\n            .build()\n            .forEach { $0.execute() }\n        return true\n    }\n}\n\n// MARK: - 手动调用\nAppDelegate().application(UIApplication.shared, didFinishLaunchingWithOptions: nil)\n')])])]),t("p",[n._v("其实上述改造并不是完全严格遵循的命令模式，比如没有接收者角色，发送者和客户端实际上并没有完全分离开，同时AppDelegateCommandsBuilder实际上是一种建造者模式，这种模式其实也比较常用，后续也会对这种模式进行单独讲解。\n使用命令模式改造AppDelegate后，当我们需要在回调中增加处理逻辑时，我们无需再修改AppDelegate，而是直接增加相应的Command类，并且在AppDelegateCommandsBuilder添加上去即可。\n那这种方式的弊端想必大家可以很明显的看出来，上述代码示例只是把didFinishLaunch方法进行了解耦，对其他方法并没有进行改造，如果对其他方法进行改造，也需要实现上述一套，会有些冗余。")]),n._v(" "),t("hr"),n._v(" "),t("h2",{attrs:{id:"中介者模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#中介者模式"}},[n._v("#")]),n._v(" 中介者模式")]),n._v(" "),t("p",[n._v("中介者模式（Mediator） 是一种 行为设计模式，能让你减少对象之间混乱无序的依赖关系。该模式会限制对象之间的直接交互， 迫使它们通过一个中介者对象进行合作。\n其实开发者对于中介者模式应该是非常熟悉，因为 MVC 模式中，C 就是一个典型的中介者，其限制了 M 与 V 之间的直接交互。")]),n._v(" "),t("h3",{attrs:{id:"uml-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#uml-2"}},[n._v("#")]),n._v(" UML")]),n._v(" "),t("img",{attrs:{src:i(715),width:"100%"}}),n._v(" "),t("h3",{attrs:{id:"代码示例-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#代码示例-2"}},[n._v("#")]),n._v(" 代码示例")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("import UIKit\n\n// MARK: - 生命周期事件接口\nprotocol AppLifecycleListener {\n    func onAppWillEnterForeground()\n    func onAppDidEnterBackground()\n    func onAppDidFinishLaunching()\n}\n\n// MARK: - 接口默认实现，使实现类可以对方法进行可选实现\nextension AppLifecycleListener {\n    func onAppWillEnterForeground() {}\n    func onAppDidEnterBackground() {}\n    func onAppDidFinishLaunching() {}\n}\n\n// MARK: - 实现类\nclass AppLifecycleListenerImp1: AppLifecycleListener {\n    func onAppDidEnterBackground() {\n\n    }\n}\n\nclass AppLifecycleListenerImp2: AppLifecycleListener {\n    func onAppDidEnterBackground() {\n\n    }\n}\n\n// MARK: - 中介者\nclass AppLifecycleMediator: NSObject {\n    private let listeners: [AppLifecycleListener]\n\n    init(listeners: [AppLifecycleListener]) {\n        self.listeners = listeners\n        super.init()\n        subscribe()\n    }\n\n    deinit {\n        NotificationCenter.default.removeObserver(self)\n    }\n\n    /// 订阅生命周期事件\n    private func subscribe() {\n        NotificationCenter.default.addObserver(self, selector: #selector(onAppWillEnterForeground), name: UIApplication.willEnterForegroundNotification, object: nil)\n        NotificationCenter.default.addObserver(self, selector: #selector(onAppDidEnterBackground), name: UIApplication.didEnterBackgroundNotification, object: nil)\n        NotificationCenter.default.addObserver(self, selector: #selector(onAppDidFinishLaunching), name: UIApplication.didFinishLaunchingNotification, object: nil)\n    }\n\n    @objc private func onAppWillEnterForeground() {\n        listeners.forEach { $0.onAppWillEnterForeground() }\n    }\n\n    @objc private func onAppDidEnterBackground() {\n        listeners.forEach { $0.onAppDidEnterBackground() }\n    }\n\n    @objc private func onAppDidFinishLaunching() {\n        listeners.forEach { $0.onAppDidFinishLaunching() }\n    }\n\n    // MARK: - 如需增加新的Listener，修改此处即可\n    public static func makeDefaultMediator() -> AppLifecycleMediator {\n        let listener1 = AppLifecycleListenerImp1()\n        let listener2 = AppLifecycleListenerImp2()\n        return AppLifecycleMediator(listeners: [listener1, listener2])\n    }\n}\n\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n    var window: UIWindow?\n\n    /// 构建监听者，内部自动订阅生命周期通知\n    let mediator = AppLifecycleMediator.makeDefaultMediator()\n\n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n        return true\n    }\n}\n")])])]),t("p",[n._v("可以看到上面AppLifecycleMediator很明显是一个中介者，生命周期事件通过其得以传播给具体的使用者。")]),n._v(" "),t("p",[n._v("其实中介者模式在组件化通信方案中也比较常用，后面有时间会给大家介绍一下，如果大家有兴趣也可以自己去了解一下，也就是我们常说的CTMediator方案。")]),n._v(" "),t("hr"),n._v(" "),t("h2",{attrs:{id:"组合模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#组合模式"}},[n._v("#")]),n._v(" 组合模式")]),n._v(" "),t("p",[n._v("组合模式 是一种 结构型设计模式，你可以使用它将对象组合成树状结构，并且能像使用独立对象一样使用它们。")]),n._v(" "),t("h3",{attrs:{id:"uml-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#uml-3"}},[n._v("#")]),n._v(" UML")]),n._v(" "),t("img",{attrs:{src:i(716),width:"100%"}}),n._v(" "),t("p",[n._v("其中类比到AppDelegate场景下，AppDelegate是一个根Composite角色，而各个业务便是Leaf角色，如果应用到组件化中，则各个组件便是Leaf角色或者Composite角色（组件内部可再分发到各个业务Leaf）。")]),n._v(" "),t("h3",{attrs:{id:"代码示例-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#代码示例-3"}},[n._v("#")]),n._v(" 代码示例")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v('// MARK: - 接口，直接继承UIApplicationDelegate, UNUserNotificationCenterDelegate两个协议。\n\n/// 空协议，各组件模块去实现该协议\npublic protocol ApplicationService: UIApplicationDelegate, UNUserNotificationCenterDelegate {}\n\n/// 方便组件内获取window\nextension ApplicationService {\n    /// window\n    public var window: UIWindow? {\n        // swiftlint:disable:next redundant_nil_coalescing\n        return UIApplication.shared.delegate?.window ?? nil\n    }\n}\n\n\n// MARK: - AppDelegate继承\nopen class ApplicationServiceManagerDelegate: UIResponder, UIApplicationDelegate {\n    /// 子类需要在构造函数中对其进行赋值\n    public var window: UIWindow?\n\n    /// 交由子类去重写，返回含有各模块实现ApplicationService的类名称的plist文件地址\n    /// plist文件需要是NSArray类型\n    open var plistPath: String? { return nil }\n\n    /// 交由子类去重写，返回各模块实现ApplicationService的类\n    open var services: [ApplicationService] {\n        guard let path = plistPath else {\n            return []\n        }\n        guard let applicationServiceNameArr = NSArray(contentsOfFile: path) else {\n            return []\n        }\n        var applicationServiceArr = [ApplicationService]( "ApplicationService")\n        for applicationServiceName in applicationServiceNameArr {\n            if let applicationServiceNameStr = applicationServiceName as? String, let applicationService = NSClassFromString(applicationServiceNameStr), let module = applicationService as? NSObject.Type {\n                let service = module.init()\n                if let result = service as? ApplicationService {\n                    applicationServiceArr.append(result)\n                }\n            }\n        }\n        return applicationServiceArr\n    }\n\n    public func getService(by type: ApplicationService.Type) -> ApplicationService? {\n        for service in applicationServices where service.isMember(of: type) {\n            return service\n        }\n        return nil\n    }\n\n    /// 懒加载获取计算属性services，使其只计算一次\n    private lazy var applicationServices: [ApplicationService] = {\n        self.services\n    }()\n}\n\n// MARK: - 协议默认实现，将事件分发到各Leaf\nextension ApplicationServiceManagerDelegate {\n    @available(iOS 3.0, *)\n    open func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]? = nil) -> Bool {\n        var result = false\n        for service in applicationServices {\n            if service.application?(application, didFinishLaunchingWithOptions: launchOptions) ?? false {\n                result = true\n            }\n        }\n        return result\n    }\n\n    /**\n    将协议方法一一实现，并将事件分发到各Leaf\n    */\n}\n\n// MARK: - 使用方式\n\nfinal class AppThemeApplicationService: NSObject, ApplicationService {\n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]? = nil) -> Bool {\n        /// setup AppTheme\n        return true\n    }\n}\n\nfinal class AppConfigApplicationService: NSObject, ApplicationService {\n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]? = nil) -> Bool {\n        /// setup AppConfig\n        return true\n    }\n}\n\n@UIApplicationMain\nclass AppDelegate: ApplicationServiceManagerDelegate {\n    override var services: [ApplicationService] {\n        return [\n            AppConfigApplicationService(),\n            AppThemeApplicationService(),\n        ]\n    }\n\n    override init() {\n        super.init()\n        if window == nil {\n        window = UIWindow()\n        }\n    }\n}\n')])])]),t("p",[n._v("从上述代码示例我们可以看出每个Leaf实现了ApplicationService协议，其可以拿到原本AppDelegate能拿到的所有回调。")]),n._v(" "),t("p",[n._v("对于AppDelegate而言，其内部不会再有任何业务上的逻辑，并且因为协议的默认实现，已经将任务默认分发到各个Leaf中，其剩余的任务仅仅就是提供Leaf列表，并且考虑到在组件化环境中的使用，不直接引用各Leaf，提供了plist配置文件的形式。")]),n._v(" "),t("p",[n._v("对该套解耦方案进行完善，沉淀出的轮子地址为ApplicationServiceManager。功能比较轻量级，欢迎大家使用。")]),n._v(" "),t("p",[n._v("关于AppDelegate的解耦其实还有阿里的BeeHive，不过其是一个综合的组件化方案，AppDelegate的事件分发只是其一部分。")]),n._v(" "),t("h2",{attrs:{id:"最后"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#最后"}},[n._v("#")]),n._v(" 最后")]),n._v(" "),t("p",[n._v("上述的三种设计模式可以根据各自项目的实际情况进行选用或者组合，比如说壳工程将事件分发到各组件内部可以选用组合模式，组件内部的事件分发可以选用命令或者中介者模式。")]),n._v(" "),t("p",[t("RouterLink",{attrs:{to:"/handbook/iOS/2020/设计模式/20201101/20201101.html"}},[n._v("单例模式")])],1)])}),[],!1,null,null,null);e.default=a.exports}}]);