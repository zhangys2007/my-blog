(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{762:function(n,t,e){"use strict";e.r(t);var s=e(5),a=Object(s.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[n._v("#")]),n._v(" 前言")]),n._v(" "),e("p",[n._v("在我们写项目时，我们会经常遇到一个问题就是浏览器的同源策略，它不允许我们向"),e("code",[n._v("不同协议号、域名、端口号")]),n._v("发送请求，在后端响应回来的数据时，浏览器接收到时就会被跨域机制拦截下来，同时在前端给我们报"),e("code",[n._v("Access to XMLHttpRequest at 'xxx' from origin 'xxx' has been blocked by CORS policy")]),n._v("的错误。这也就是我们称为浏览器跨域了。下面我就来介绍三种常见的解决跨域的三种方式。")]),n._v(" "),e("h2",{attrs:{id:"jsonp"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jsonp"}},[n._v("#")]),n._v(" JSONP")]),n._v(" "),e("p",[n._v("首先我们先来介绍介绍JSONP解决跨域的方法，其主要是利用 script 的 src 属性加载资源时不受同源策略的影响这一特性且需要前后端配合。下面来段代码来学会如何使用JSONP来解决跨域。（仅限于GET请求）")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("//前端部分：HTML\n<body>  \n    <button id=\"btn\"> 获取数据</button>  // 点击按钮发送请求\n    <script>\n    const jsonp = (url, params, cb) => { //创建JSONP函数\n        return new Promise((resolve, reject) => {\n            const script = document.createElement('script') // 创建一个script标签 \n            params = {...params, cb: cb } //结构出data和cb\n            const arr = Object.keys(params).map(key => `${key}=${params[key]}`) //[name='wn',&cb:xxx] //将参数转化成能拼接在url后面的形式\n            script.src = `${url}?${arr.join('&')}`  //将参数拼接到http://localhost:3000?name='wn'&cb:xxx上\n            document.body.appendChild(script) // 想body上插入script标签\n            // 后端会返回一个函数给前端\n            //script.src === callback('wn今年18岁')\n            // [callback]属性声明分布式应用程序的客户端(window)上存在的静态回调函数\n            window[cb] = (data) => {//在windows上执行后端返回的函数\n                resolve(data)\n            }\n        })\n    }\n    let btn = document.getElementById('btn')\n        btn.addEventListener('click', () => { //绑定按钮的点击事件\n            jsonp('http://localhost:3000',{name:'wn',age:18},'callback')\n            .then(res => { // 接受后端返回\n                console.log(res);\n            })\n        })\n    <\/script>\n</body>\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("//后端部分：JS\nconst Koa = require('koa') \nconst app = new Koa()\nconst main = (ctx, next) => {\n    console.log(ctx.query);\n    const{name ,age, cb} =ctx.query // 解构和接收前端传递的参数\n    const userInfo = `${name}今年${age}岁`\n    const str = `${cb}(${JSON.stringify(userInfo)})`  //`callback()` 拼接一个函数返回给前端\n    console.log(str);\n    ctx.body = str\n}\napp.use(main)\napp.listen(3000, () => {\n    console.log('项目已启动');\n})\n")])])]),e("p",[e("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/56c5668e32ec46aa9e270932bb9a1ffd~tplv-k3u1fbpfcp-watermark.image?",alt:"P@71HWB2.png"}})]),n._v(" "),e("p",[e("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e65d19ee0c294d77ba694571e732a784~tplv-k3u1fbpfcp-watermark.image?",alt:"KJ)M)9XSY1_ANO4}3.png"}})]),n._v(" "),e("p",[e("code",[n._v("通过JSONP利用src属性不受同源策略的影响，我们直接在前端创建一个scrpit标签，通过srcpit中的src属性向后端发送请求，让我们前端可以拿到后端返回的数据，解决了前端跨域问题。")])]),n._v(" "),e("h2",{attrs:{id:"cors"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cors"}},[n._v("#")]),n._v(" Cors")]),n._v(" "),e("p",[n._v("在介绍完JSONP方法后，我们再来看一种更简单的Cors解决跨域的方法。cors方法需要我们在后端环境下安装，且需要后端开启，同时只能在开发环境下使用,下面我们来段代码介绍一下Cors方法。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("//前端部分：HTML\n<body>  \n    \x3c!-- <img src=\"xxxx\" alt=\"\"> --\x3e\n    <button id=\"btn\"> 获取数据</button>\n\n    \x3c!-- <script src=\"xxxx.js?callback\"><\/script> --\x3e\n    <script>\n        let btn = document.getElementById('btn')\n        btn.addEventListener('click', () => {\n            $.ajax({\n                url:'http://localhost:3000',\n                data:{\n                    name:'wn'\n                },\n                headers: {  //为了告诉后端，你返回的响应头的类型应该是xxx\n                    \"Content-Type\":'application/json;charset=utf-8'\n                    // accept:'application/json;charset=utf-8'\n                },\n                method:'get',\n                success(res) {\n                    console.log(res);\n                }\n            })\n        })\n    <\/script>\n</body>\n\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("//后端部分：JS\nconst Koa = require('koa')\nconst cors = require('@koa/cors');\nconst app = new Koa()\napp.use(cors()); //后端开启cors，允许跨域操作\nconst main = (ctx, next) => {\n    console.log(ctx.query.name);\n    ctx.body = 'hello world'\n}\napp.use(main)\napp.listen(3000, () => {\n    console.log('Cors项目已启动');\n})\n\n")])])]),e("p",[n._v("我们仅需在前端用ajax发送请求，后端安装一个cors方法，然后再后端开启cors即实现如上图一样的效果，解决前端跨域问题。但是cros只能在开发环境下使用，因为一旦开始cros方法后，浏览器的同源策略就失效了。")]),n._v(" "),e("p",[n._v("那我们就好奇了，这个cors的源码到底是怎么写的呢？ 我们是否可以限制他的白名单呢？下面我们就来一段代码，看看cors的实现原理吧。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('const http = require(\'http\')\nconst server = http.createServer((req, res) => {\n    // 开启 Cors ,后端在响应头中设置\n    res.writeHead(200, {\n        "Access-Control-Allow-Origin": "http://127.0.0.1:5500", //白名单\n        "Access-Control-Allow-Methods": "GET, POST, PUT, OPTIONS", //请求的方法\n        //不管浏览器返货什么类型都可以\n        "Access-Control-Allow-Headers": "Content-Type" // 请求头\n    })\n    res.end(\'hello cors\') // 返回数据\n})\nserver.listen(3000, () => { \n    console.log(\'Cors项目已启动\');\n})\n')])])]),e("h2",{attrs:{id:"node代理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#node代理"}},[n._v("#")]),n._v(" Node代理")]),n._v(" "),e("p",[n._v("在介绍完上面这两种方法后，我们再来一种我们在vue项目中用的最多的Node代理的方法吧。"),e("strong",[n._v("Node代理实现跨域的原理为，在我们的vue项目向直接自己开一个符合同源策略的后端，我们在使用我们的后端将跨域的后端数据拿到我们自己开的后端上，再让前端直接请求我们的后端。")]),n._v(" 这样就实现了Node代理。下面我们来一段代码来实现一下Node代理的方法。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("//前端代码：HTML\n<body>  \n    <button id=\"btn\"> 获取数据</button> \n    <script>\n        let btn = document.getElementById('btn')\n        btn.addEventListener('click', () => { \n            $.ajax({ // 正常发送请求\n                url:'http://localhost:3001',\n                data:{\n                    name:'wn'\n                }\n                method:'get',\n                success(res) {\n                    console.log(res);\n                }\n            })\n        })\n    <\/script>\n</body>\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 自己开的后端\nconst http = require('http')\nconst server = http.createServer((req, res) => {\n    // 开启 Cors ,后端在响应头中设置\n    res.writeHead(200, {\n        \"Access-Control-Allow-Origin\": \"http://127.0.0.1:5500\", //白名单\n        \"Access-Control-Allow-Methods\": \"GET, POST, PUT, OPTIONS\",\n        //不管浏览器返货什么类型都可以\n        \"Access-Control-Allow-Headers\": \"Content-Type\"\n    })\n    // 向别人的后端请求数据\n    const proxyReq = http.request({\n        host:'127.0.0.1',\n        port:'3000',\n        path:'/',\n        method:'GET'\n    }, \n    proxyRes => {\n        // console.log(proxyRes); //事件参数\n        proxyRes.on('data', result => {\n            // console.log(result.toString());\n            res.end(result.toString())\n        })\n    }).end()//终止\n})\nserver.listen(3001, () => {\n    console.log('node项目已启动');\n})\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("//需要请求的后端\nconst Koa = require('koa')\nconst app = new Koa()\nconst main = (ctx, next) => {\n    ctx.body = 'hello world'\n}\napp.use(main)\napp.listen(3000, () => {\n    console.log('项目已启动');\n})\n")])])]),e("h1",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[n._v("#")]),n._v(" 总结")]),n._v(" "),e("p",[n._v("解决跨域的方式还有许多种，这里我也就介绍了比较常见的三种，欢迎大神补充更方便快捷的解决跨域的方法。")])])}),[],!1,null,null,null);t.default=a.exports}}]);