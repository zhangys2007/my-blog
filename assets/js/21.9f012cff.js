(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{728:function(t,n,a){t.exports=a.p+"assets/img/2023121901.d251f561.png"},754:function(t,n,a){"use strict";a.r(n);var e=a(5),i=Object(e.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("在日常使用app的过程中，经常能看到人家实现了底部分栏控制器的中间按钮凸起的效果，那么这是怎么实现的呢？")]),t._v(" "),e("h2",{attrs:{id:"效果演示"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#效果演示"}},[t._v("#")]),t._v(" 效果演示：")]),t._v(" "),e("p",[e("img",{attrs:{src:a(728),alt:"图片"}})]),t._v(" "),e("h2",{attrs:{id:"实现原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实现原理"}},[t._v("#")]),t._v(" 实现原理：")]),t._v(" "),e("p",[t._v("创建按钮\n创建一个UITabBar的子类，重写它的layoutSubviews方法：\n"),e("pre",[e("p",{staticStyle:{color:"white"}},[t._v('- (void)layoutSubviews {\n[super layoutSubviews];\nCGFloat width = self.bp_width;\n// 添加发布按钮\n[self addSubview:self.publishButton];\nself.publishButton.center = CGPointMake(width * 0.5, 0);\n// 按钮索引\nint index = 0;\n// tabBar上按钮的尺寸\nCGFloat tabBarButtonW = (width - publishButtonWidth) / 2;\nCGFloat tabBarButtonH = [UIDevice bp_tabBarHeight];\nCGFloat tabBarButtonY = 0;\n// 设置TabBarButton的frame\nfor (UIView *tabBarButton in self.subviews) {\nif (![NSStringFromClass(tabBarButton.class) isEqualToString:@"UITabBarButton"]) {\ncontinue;\n}\n// 计算按钮的X值\nCGFloat tabBarButtonX = index * tabBarButtonW;\nif (index == 1) { // 给下一个个button增加一个publushButton宽度的x值\ntabBarButtonX += publishButtonWidth;\n}\n// 设置按钮的frame\ntabBarButton.frame = CGRectMake(tabBarButtonX, tabBarButtonY, tabBarButtonW, tabBarButtonH);\n// 增加索引\nindex++;\n}\n}')])])]),t._v(" "),e("p",[t._v("方法里面对原有的tabBarButton的位置进行调整，以便把自己加上去的按钮插入到中间，把center位置设置成tabBar上沿的中间位置。")]),t._v(" "),e("h2",{attrs:{id:"扩大点击范围"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#扩大点击范围"}},[t._v("#")]),t._v(" 扩大点击范围")]),t._v(" "),e("p",[t._v("按钮加上去后，发现点击超出tabBar范围的位置，按钮无法响应，所以，需要重写hitTest方法，扩大响应范围：\n"),e("pre",[e("p",{staticStyle:{color:"white"}},[t._v("// 重写扩大响应范围\n-(UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event {\nif (self.isHidden == NO) {\nCGPoint newPoint = [self convertPoint:point toView:self.publishButton];\nif ([self.publishButton pointInside:newPoint withEvent:event]) {\nreturn self.publishButton;\n}\n}\nreturn [super hitTest:point withEvent:event];\n}")])]),t._v("\n这样，这个中间凸起的按钮就做好了！")])])}),[],!1,null,null,null);n.default=i.exports}}]);