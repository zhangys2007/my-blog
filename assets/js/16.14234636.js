(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{710:function(e,t,a){e.exports=a.p+"assets/img/20200301.74f829fe.jpg"},742:function(e,t,a){"use strict";a.r(t);var n=a(5),r=Object(n.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[e._v("在上一篇文章中介绍了"),n("RouterLink",{attrs:{to:"/handbook/iOS/2020/设计模式/20200201/20200201.html"}},[e._v("工厂方法模式")]),e._v("，其实工厂方法和抽象工厂有很多相似的地方，抽象工厂是工厂方法的升级版，只不过工厂方法模式只生产一个等级的产品，而抽象工厂模式可生产多个等级的产品，可以生产一个产品族的产品。")],1),e._v(" "),n("h2",{attrs:{id:"什么是抽象工厂"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么是抽象工厂"}},[e._v("#")]),e._v(" 什么是抽象工厂？")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。\n")])])]),n("h2",{attrs:{id:"主要角色与关系"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#主要角色与关系"}},[e._v("#")]),e._v(" 主要角色与关系")]),e._v(" "),n("ul",[n("li",[e._v("抽象工厂（Abstract Factory）：提供创建抽象产品的接口，包括多个创建产品的方法。")]),e._v(" "),n("li",[e._v("具体工厂（Concrete Factory）：实现了抽象工厂的多个抽象方法，完成具体产品的创建。")]),e._v(" "),n("li",[e._v("抽象产品（Product）：描述了产品的规范、功能以及特性等，在抽象工厂模式中有多个抽象产品。")]),e._v(" "),n("li",[e._v("具体产品（Concrete Product）：实现了抽象产品的接口，由具体工厂来创建。")])]),e._v(" "),n("h2",{attrs:{id:"uml图"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#uml图"}},[e._v("#")]),e._v(" UML图")]),e._v(" "),n("img",{attrs:{src:a(710),width:"80%"}}),e._v(" "),n("h2",{attrs:{id:"举例说明"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#举例说明"}},[e._v("#")]),e._v(" 举例说明")]),e._v(" "),n("p",[e._v("我们以生产电子产品为例，因为电子产品很多，这里我们就拿电脑和手机为例，一个工厂生产一种电脑和手机，苹果工厂生产mac和iphone，华为工厂生产华为电脑和华为手机。")]),e._v(" "),n("p",[e._v("1.创建抽象产品Phone,以及具体的手机产品：iPhone和HuaweiPhone；创建抽象产品Computer,以及具体的手机产品：Mac和HuaweiComputer")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('class Computer {\n    func getName() -> String {\n        return ""\n    }\n}\n\nclass Mac: Computer {\n    override func getName() -> String {\n    return "Mac"\n    }\n}\n\nclass HuaweiComputer: Computer {\n    override func getName() -> String {\n        return "Huawei computer"\n    }\n}\n\nclass Phone {\n    func getName() -> String {\n        return ""\n    }\n}\n\nclass iPhone: Phone {\n    override func getName() -> String {\n        return "iPhone"\n    }\n}\n\nclass HuaweiPhone: Phone {\n    override func getName() -> String {\n        return "Huawei Phone"\n    }\n}\n')])])]),n("p",[e._v("2.创建抽象工厂:ElectronicsAbstractFactory,生产手机和电脑")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("protocol ElectronicsAbstractFactory {\n    func createPhone() -> Phone\n    func createComputer() -> Computer\n}\n")])])]),n("p",[e._v("3.定义具体工厂类AppleElectronicsFactory和HuaweiElectronicsFactory")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("class AppleElectronicsFactory: ElectronicsAbstractFactory {\n    func createPhone() -> Phone {\n        return iPhone();\n    }\n\n    func createComputer() -> Computer {\n        return Mac()\n    }\n}\n\nclass HuaweiElectronicsFactory: ElectronicsAbstractFactory {\n    func createPhone() -> Phone {\n        return HuaweiPhone();\n    }\n\n    func createComputer() -> Computer {\n        return HuaweiComputer()\n    }\n}\n")])])]),n("p",[e._v("4.客户端调用")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('func testClient() {\n    let appleFactory = AppleElectronicsFactory()\n    let iphone = appleFactory.createPhone()\n    let mac = appleFactory.createComputer()\n    print("phone: \\(iphone.getName()), computer: \\(mac.getName())")\n\n    let huaweiFactory = HuaweiElectronicsFactory()\n    let huaweiPhone = huaweiFactory.createPhone()\n    let huaweiComputer = huaweiFactory.createComputer()\n    print("phone: \\(huaweiPhone.getName()), computer: \\(huaweiComputer.getName())")\n}\n')])])]),n("h2",{attrs:{id:"总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),n("h3",{attrs:{id:"优点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[e._v("#")]),e._v(" 优点")]),e._v(" "),n("ul",[n("li",[e._v("易于交换产品系列，由于具体的工厂类，例如let appleFactory = AppleElectronicsFactory(),在一个应用中只需要在初始化的时候出现一次，故想要改变一个具体的工厂就很容易了。")]),e._v(" "),n("li",[e._v("让具体的创建实例的过程与客户端分离，客户端是通过抽象接口操纵实例的，产品的具体类也被具体工厂的实现分离，因此具体的产品不会出现在客户端，减少了代码的耦合。")])]),e._v(" "),n("h3",{attrs:{id:"缺点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[e._v("#")]),e._v(" 缺点")]),e._v(" "),n("p",[e._v("当需要添加一个新的产品时，比如Watch，至少需要增加三个类:Watch抽象类、iWatch、HuaweiWatch,同时还需要修改ElectronicsAbstractFactory、AppleElectronicsFactory、HuaweiElectronicsFactory，违背了开闭原则。")]),e._v(" "),n("p",[n("RouterLink",{attrs:{to:"/handbook/iOS/2020/设计模式/20200401/20200401.html"}},[e._v("建造者模式")])],1)])}),[],!1,null,null,null);t.default=r.exports}}]);